// @ts-nocheck

/**
 * Auto Generated by orval
 * Do not edit manually.
 * BaseApp Backend API
 * API para el sistema de BaseApp Backend
 */

import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  EmailTokenObtain,
  PatchedUser,
  TokenRefresh,
  User,
  UserRegistration,
} from "../baseAppBackendAPI.schemas";
import { customAxios } from "../../lib/axiosInstance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 */
export const apiAuthLoginCreate = (
  emailTokenObtain: EmailTokenObtain,
  signal?: AbortSignal,
) => {
  return customAxios<EmailTokenObtain>({
    url: `/api/auth/login/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: emailTokenObtain,
    signal,
  });
};

export const getApiAuthLoginCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof apiAuthLoginCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: EmailTokenObtain },
    TContext
  >;
}) => {
  const mutationKey = ["apiAuthLoginCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiAuthLoginCreate>>,
    { data: EmailTokenObtain }
  > = (props) => {
    const { data } = props ?? {};

    return apiAuthLoginCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: EmailTokenObtain },
    TContext
  >;
};

export type ApiAuthLoginCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiAuthLoginCreate>>
>;
export type ApiAuthLoginCreateMutationBody = EmailTokenObtain;
export type ApiAuthLoginCreateMutationError = unknown;

export const useApiAuthLoginCreate = <
  TData = Awaited<ReturnType<typeof apiAuthLoginCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: EmailTokenObtain },
    TContext
  >;
}): UseMutationResult<TData, TError, { data: EmailTokenObtain }, TContext> => {
  const mutationOptions = getApiAuthLoginCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const apiAuthRefreshCreate = (
  tokenRefresh: NonReadonly<TokenRefresh>,
  signal?: AbortSignal,
) => {
  return customAxios<TokenRefresh>({
    url: `/api/auth/refresh/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: tokenRefresh,
    signal,
  });
};

export const getApiAuthRefreshCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof apiAuthRefreshCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<TokenRefresh> },
    TContext
  >;
}) => {
  const mutationKey = ["apiAuthRefreshCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiAuthRefreshCreate>>,
    { data: NonReadonly<TokenRefresh> }
  > = (props) => {
    const { data } = props ?? {};

    return apiAuthRefreshCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<TokenRefresh> },
    TContext
  >;
};

export type ApiAuthRefreshCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiAuthRefreshCreate>>
>;
export type ApiAuthRefreshCreateMutationBody = NonReadonly<TokenRefresh>;
export type ApiAuthRefreshCreateMutationError = unknown;

export const useApiAuthRefreshCreate = <
  TData = Awaited<ReturnType<typeof apiAuthRefreshCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<TokenRefresh> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { data: NonReadonly<TokenRefresh> },
  TContext
> => {
  const mutationOptions = getApiAuthRefreshCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiAuthRegisterCreate = (
  userRegistration: UserRegistration,
  signal?: AbortSignal,
) => {
  return customAxios<UserRegistration>({
    url: `/api/auth/register/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userRegistration,
    signal,
  });
};

export const getApiAuthRegisterCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof apiAuthRegisterCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: UserRegistration },
    TContext
  >;
}) => {
  const mutationKey = ["apiAuthRegisterCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiAuthRegisterCreate>>,
    { data: UserRegistration }
  > = (props) => {
    const { data } = props ?? {};

    return apiAuthRegisterCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: UserRegistration },
    TContext
  >;
};

export type ApiAuthRegisterCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiAuthRegisterCreate>>
>;
export type ApiAuthRegisterCreateMutationBody = UserRegistration;
export type ApiAuthRegisterCreateMutationError = unknown;

export const useApiAuthRegisterCreate = <
  TData = Awaited<ReturnType<typeof apiAuthRegisterCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: UserRegistration },
    TContext
  >;
}): UseMutationResult<TData, TError, { data: UserRegistration }, TContext> => {
  const mutationOptions = getApiAuthRegisterCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiUsersList = (signal?: AbortSignal) => {
  return customAxios<User[]>({ url: `/api/users/`, method: "GET", signal });
};

export const getApiUsersListQueryKey = () => {
  return [`/api/users/`] as const;
};

export const getApiUsersListQueryOptions = <
  TData = Awaited<ReturnType<typeof apiUsersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiUsersListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersList>>> = ({
    signal,
  }) => apiUsersList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiUsersList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ApiUsersListQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersList>>
>;
export type ApiUsersListQueryError = unknown;

export function useApiUsersList<
  TData = Awaited<ReturnType<typeof apiUsersList>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof apiUsersList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useApiUsersList<
  TData = Awaited<ReturnType<typeof apiUsersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof apiUsersList>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useApiUsersList<
  TData = Awaited<ReturnType<typeof apiUsersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useApiUsersList<
  TData = Awaited<ReturnType<typeof apiUsersList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getApiUsersListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const apiUsersCreate = (
  user: NonReadonly<User>,
  signal?: AbortSignal,
) => {
  return customAxios<User>({
    url: `/api/users/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: user,
    signal,
  });
};

export const getApiUsersCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof apiUsersCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<User> },
    TContext
  >;
}) => {
  const mutationKey = ["apiUsersCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersCreate>>,
    { data: NonReadonly<User> }
  > = (props) => {
    const { data } = props ?? {};

    return apiUsersCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<User> },
    TContext
  >;
};

export type ApiUsersCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersCreate>>
>;
export type ApiUsersCreateMutationBody = NonReadonly<User>;
export type ApiUsersCreateMutationError = unknown;

export const useApiUsersCreate = <
  TData = Awaited<ReturnType<typeof apiUsersCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<User> },
    TContext
  >;
}): UseMutationResult<TData, TError, { data: NonReadonly<User> }, TContext> => {
  const mutationOptions = getApiUsersCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiUsersRetrieve = (id: number, signal?: AbortSignal) => {
  return customAxios<User>({ url: `/api/users/${id}/`, method: "GET", signal });
};

export const getApiUsersRetrieveQueryKey = (id: number) => {
  return [`/api/users/${id}/`] as const;
};

export const getApiUsersRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof apiUsersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersRetrieve>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiUsersRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiUsersRetrieve>>
  > = ({ signal }) => apiUsersRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiUsersRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ApiUsersRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersRetrieve>>
>;
export type ApiUsersRetrieveQueryError = unknown;

export function useApiUsersRetrieve<
  TData = Awaited<ReturnType<typeof apiUsersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiUsersRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useApiUsersRetrieve<
  TData = Awaited<ReturnType<typeof apiUsersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiUsersRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useApiUsersRetrieve<
  TData = Awaited<ReturnType<typeof apiUsersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersRetrieve>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useApiUsersRetrieve<
  TData = Awaited<ReturnType<typeof apiUsersRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersRetrieve>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getApiUsersRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const apiUsersUpdate = (id: number, user: NonReadonly<User>) => {
  return customAxios<User>({
    url: `/api/users/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: user,
  });
};

export const getApiUsersUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof apiUsersUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<User> },
    TContext
  >;
}) => {
  const mutationKey = ["apiUsersUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersUpdate>>,
    { id: number; data: NonReadonly<User> }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiUsersUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<User> },
    TContext
  >;
};

export type ApiUsersUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersUpdate>>
>;
export type ApiUsersUpdateMutationBody = NonReadonly<User>;
export type ApiUsersUpdateMutationError = unknown;

export const useApiUsersUpdate = <
  TData = Awaited<ReturnType<typeof apiUsersUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<User> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: number; data: NonReadonly<User> },
  TContext
> => {
  const mutationOptions = getApiUsersUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiUsersPartialUpdate = (
  id: number,
  patchedUser: NonReadonly<PatchedUser>,
) => {
  return customAxios<User>({
    url: `/api/users/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedUser,
  });
};

export const getApiUsersPartialUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof apiUsersPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedUser> },
    TContext
  >;
}) => {
  const mutationKey = ["apiUsersPartialUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersPartialUpdate>>,
    { id: number; data: NonReadonly<PatchedUser> }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiUsersPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedUser> },
    TContext
  >;
};

export type ApiUsersPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersPartialUpdate>>
>;
export type ApiUsersPartialUpdateMutationBody = NonReadonly<PatchedUser>;
export type ApiUsersPartialUpdateMutationError = unknown;

export const useApiUsersPartialUpdate = <
  TData = Awaited<ReturnType<typeof apiUsersPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedUser> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: number; data: NonReadonly<PatchedUser> },
  TContext
> => {
  const mutationOptions = getApiUsersPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiUsersDestroy = (id: number) => {
  return customAxios<void>({ url: `/api/users/${id}/`, method: "DELETE" });
};

export const getApiUsersDestroyMutationOptions = <
  TData = Awaited<ReturnType<typeof apiUsersDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: number }, TContext>;
}) => {
  const mutationKey = ["apiUsersDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return apiUsersDestroy(id);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number },
    TContext
  >;
};

export type ApiUsersDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersDestroy>>
>;

export type ApiUsersDestroyMutationError = unknown;

export const useApiUsersDestroy = <
  TData = Awaited<ReturnType<typeof apiUsersDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: number }, TContext>;
}): UseMutationResult<TData, TError, { id: number }, TContext> => {
  const mutationOptions = getApiUsersDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
export const apiUsersMeRetrieve = (signal?: AbortSignal) => {
  return customAxios<User>({ url: `/api/users/me/`, method: "GET", signal });
};

export const getApiUsersMeRetrieveQueryKey = () => {
  return [`/api/users/me/`] as const;
};

export const getApiUsersMeRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiUsersMeRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiUsersMeRetrieve>>
  > = ({ signal }) => apiUsersMeRetrieve(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ApiUsersMeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersMeRetrieve>>
>;
export type ApiUsersMeRetrieveQueryError = unknown;

export function useApiUsersMeRetrieve<
  TData = Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useApiUsersMeRetrieve<
  TData = Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useApiUsersMeRetrieve<
  TData = Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useApiUsersMeRetrieve<
  TData = Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getApiUsersMeRetrieveQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
