// @ts-nocheck

/**
 * Auto Generated by orval
 * Do not edit manually.
 * BaseApp Backend API
 * API para el sistema de BaseApp Backend
 */

import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Form,
  FormsListParams,
  FormsResultListParams,
  PatchedForm,
  Result,
} from "../baseAppBackendAPI.schemas";
import { customAxios } from "../../lib/axiosInstance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const formsList = (params?: FormsListParams, signal?: AbortSignal) => {
  return customAxios<Form[]>({
    url: `/api/forms/`,
    method: "GET",
    params,
    signal,
  });
};

export const getFormsListQueryKey = (params?: FormsListParams) => {
  return [`/api/forms/`, ...(params ? [params] : [])] as const;
};

export const getFormsListQueryOptions = <
  TData = Awaited<ReturnType<typeof formsList>>,
  TError = unknown,
>(
  params?: FormsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsList>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsList>>> = ({
    signal,
  }) => formsList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FormsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsList>>
>;
export type FormsListQueryError = unknown;

export function useFormsList<
  TData = Awaited<ReturnType<typeof formsList>>,
  TError = unknown,
>(
  params: undefined | FormsListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsList>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFormsList<
  TData = Awaited<ReturnType<typeof formsList>>,
  TError = unknown,
>(
  params?: FormsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsList>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFormsList<
  TData = Awaited<ReturnType<typeof formsList>>,
  TError = unknown,
>(
  params?: FormsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsList>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useFormsList<
  TData = Awaited<ReturnType<typeof formsList>>,
  TError = unknown,
>(
  params?: FormsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsList>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFormsListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsCreate = (form: NonReadonly<Form>, signal?: AbortSignal) => {
  return customAxios<Form>({
    url: `/api/forms/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: form,
    signal,
  });
};

export const getFormsCreateMutationOptions = <
  TData = Awaited<ReturnType<typeof formsCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<Form> },
    TContext
  >;
}) => {
  const mutationKey = ["formsCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsCreate>>,
    { data: NonReadonly<Form> }
  > = (props) => {
    const { data } = props ?? {};

    return formsCreate(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<Form> },
    TContext
  >;
};

export type FormsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsCreate>>
>;
export type FormsCreateMutationBody = NonReadonly<Form>;
export type FormsCreateMutationError = unknown;

export const useFormsCreate = <
  TData = Awaited<ReturnType<typeof formsCreate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: NonReadonly<Form> },
    TContext
  >;
}): UseMutationResult<TData, TError, { data: NonReadonly<Form> }, TContext> => {
  const mutationOptions = getFormsCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const formsRetrieve = (id: number, signal?: AbortSignal) => {
  return customAxios<Form>({ url: `/api/forms/${id}/`, method: "GET", signal });
};

export const getFormsRetrieveQueryKey = (id: number) => {
  return [`/api/forms/${id}/`] as const;
};

export const getFormsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof formsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsRetrieve>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsRetrieve>>> = ({
    signal,
  }) => formsRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof formsRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FormsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsRetrieve>>
>;
export type FormsRetrieveQueryError = unknown;

export function useFormsRetrieve<
  TData = Awaited<ReturnType<typeof formsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsRetrieve>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFormsRetrieve<
  TData = Awaited<ReturnType<typeof formsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsRetrieve>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsRetrieve>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFormsRetrieve<
  TData = Awaited<ReturnType<typeof formsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsRetrieve>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useFormsRetrieve<
  TData = Awaited<ReturnType<typeof formsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsRetrieve>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFormsRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsUpdate = (id: number, form: NonReadonly<Form>) => {
  return customAxios<Form>({
    url: `/api/forms/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: form,
  });
};

export const getFormsUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof formsUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<Form> },
    TContext
  >;
}) => {
  const mutationKey = ["formsUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsUpdate>>,
    { id: number; data: NonReadonly<Form> }
  > = (props) => {
    const { id, data } = props ?? {};

    return formsUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<Form> },
    TContext
  >;
};

export type FormsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsUpdate>>
>;
export type FormsUpdateMutationBody = NonReadonly<Form>;
export type FormsUpdateMutationError = unknown;

export const useFormsUpdate = <
  TData = Awaited<ReturnType<typeof formsUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<Form> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: number; data: NonReadonly<Form> },
  TContext
> => {
  const mutationOptions = getFormsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const formsPartialUpdate = (
  id: number,
  patchedForm: NonReadonly<PatchedForm>,
) => {
  return customAxios<Form>({
    url: `/api/forms/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedForm,
  });
};

export const getFormsPartialUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof formsPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedForm> },
    TContext
  >;
}) => {
  const mutationKey = ["formsPartialUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsPartialUpdate>>,
    { id: number; data: NonReadonly<PatchedForm> }
  > = (props) => {
    const { id, data } = props ?? {};

    return formsPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedForm> },
    TContext
  >;
};

export type FormsPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsPartialUpdate>>
>;
export type FormsPartialUpdateMutationBody = NonReadonly<PatchedForm>;
export type FormsPartialUpdateMutationError = unknown;

export const useFormsPartialUpdate = <
  TData = Awaited<ReturnType<typeof formsPartialUpdate>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { id: number; data: NonReadonly<PatchedForm> },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { id: number; data: NonReadonly<PatchedForm> },
  TContext
> => {
  const mutationOptions = getFormsPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const formsDestroy = (id: number) => {
  return customAxios<void>({ url: `/api/forms/${id}/`, method: "DELETE" });
};

export const getFormsDestroyMutationOptions = <
  TData = Awaited<ReturnType<typeof formsDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: number }, TContext>;
}) => {
  const mutationKey = ["formsDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return formsDestroy(id);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { id: number },
    TContext
  >;
};

export type FormsDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsDestroy>>
>;

export type FormsDestroyMutationError = unknown;

export const useFormsDestroy = <
  TData = Awaited<ReturnType<typeof formsDestroy>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: number }, TContext>;
}): UseMutationResult<TData, TError, { id: number }, TContext> => {
  const mutationOptions = getFormsDestroyMutationOptions(options);

  return useMutation(mutationOptions);
};
export const formsResultList = (
  params?: FormsResultListParams,
  signal?: AbortSignal,
) => {
  return customAxios<Result[]>({
    url: `/api/forms/result/`,
    method: "GET",
    params,
    signal,
  });
};

export const getFormsResultListQueryKey = (params?: FormsResultListParams) => {
  return [`/api/forms/result/`, ...(params ? [params] : [])] as const;
};

export const getFormsResultListQueryOptions = <
  TData = Awaited<ReturnType<typeof formsResultList>>,
  TError = unknown,
>(
  params?: FormsResultListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsResultList>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsResultListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsResultList>>> = ({
    signal,
  }) => formsResultList(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsResultList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type FormsResultListQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsResultList>>
>;
export type FormsResultListQueryError = unknown;

export function useFormsResultList<
  TData = Awaited<ReturnType<typeof formsResultList>>,
  TError = unknown,
>(
  params: undefined | FormsResultListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsResultList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsResultList>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useFormsResultList<
  TData = Awaited<ReturnType<typeof formsResultList>>,
  TError = unknown,
>(
  params?: FormsResultListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsResultList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsResultList>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useFormsResultList<
  TData = Awaited<ReturnType<typeof formsResultList>>,
  TError = unknown,
>(
  params?: FormsResultListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsResultList>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useFormsResultList<
  TData = Awaited<ReturnType<typeof formsResultList>>,
  TError = unknown,
>(
  params?: FormsResultListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsResultList>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFormsResultListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
